// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

import 'package:flutter/services.dart';

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Enigo>>
abstract class Enigo implements RustOpaqueInterface {
  void button({required Button button, required Direction direction});

  void key({required PhysicalKeyboardKey key, required Direction direction});

  (int, int) location();

  (int, int) mainDisplay();

  void moveMouse(
      {required int x, required int y, required Coordinate coordinate});

  factory Enigo({required Settings settings}) =>
      RustLib.instance.api.crateApiEnigoEnigoNew(settings: settings);

  static Enigo preset() => RustLib.instance.api.crateApiEnigoEnigoPreset();

  void raw({required int keycode, required Direction direction});

  void scroll({required int length, required Axis axis});

  void text({required String text});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<_Button>>
abstract class Button implements RustOpaqueInterface {
  static Button get back => RustLib.instance.api.crateApiEnigoButtonBack();

  static Button get forward =>
      RustLib.instance.api.crateApiEnigoButtonForward();

  static Button get left => RustLib.instance.api.crateApiEnigoButtonLeft();

  static Button get middle => RustLib.instance.api.crateApiEnigoButtonMiddle();

  factory Button({required String value}) =>
      RustLib.instance.api.crateApiEnigoButtonNew(value: value);

  static Button get right => RustLib.instance.api.crateApiEnigoButtonRight();

  static Button get scrollDown =>
      RustLib.instance.api.crateApiEnigoButtonScrollDown();

  static Button get scrollLeft =>
      RustLib.instance.api.crateApiEnigoButtonScrollLeft();

  static Button get scrollRight =>
      RustLib.instance.api.crateApiEnigoButtonScrollRight();

  static Button get scrollUp =>
      RustLib.instance.api.crateApiEnigoButtonScrollUp();

  @override
  String toString();
}

enum Axis {
  horizontal,
  vertical,
  ;
}

enum Coordinate {
  abs,
  rel,
  ;
}

enum Direction {
  press,
  release,
  click,
  ;
}

class Settings {
  final int linuxDelay;
  final String? x11Display;
  final String? waylandDisplay;
  final BigInt? windowsDwExtraInfo;
  final PlatformInt64? eventSourceUserData;
  final bool releaseKeysWhenDropped;
  final bool openPromptToGetPermissions;
  final bool independentOfKeyboardState;
  final bool windowsSubjectToMouseSpeedAndAccelerationLevel;

  const Settings({
    required this.linuxDelay,
    this.x11Display,
    this.waylandDisplay,
    this.windowsDwExtraInfo,
    this.eventSourceUserData,
    required this.releaseKeysWhenDropped,
    required this.openPromptToGetPermissions,
    required this.independentOfKeyboardState,
    required this.windowsSubjectToMouseSpeedAndAccelerationLevel,
  });

  @override
  int get hashCode =>
      linuxDelay.hashCode ^
      x11Display.hashCode ^
      waylandDisplay.hashCode ^
      windowsDwExtraInfo.hashCode ^
      eventSourceUserData.hashCode ^
      releaseKeysWhenDropped.hashCode ^
      openPromptToGetPermissions.hashCode ^
      independentOfKeyboardState.hashCode ^
      windowsSubjectToMouseSpeedAndAccelerationLevel.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Settings &&
          runtimeType == other.runtimeType &&
          linuxDelay == other.linuxDelay &&
          x11Display == other.x11Display &&
          waylandDisplay == other.waylandDisplay &&
          windowsDwExtraInfo == other.windowsDwExtraInfo &&
          eventSourceUserData == other.eventSourceUserData &&
          releaseKeysWhenDropped == other.releaseKeysWhenDropped &&
          openPromptToGetPermissions == other.openPromptToGetPermissions &&
          independentOfKeyboardState == other.independentOfKeyboardState &&
          windowsSubjectToMouseSpeedAndAccelerationLevel ==
              other.windowsSubjectToMouseSpeedAndAccelerationLevel;
}
