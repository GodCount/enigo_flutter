// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

import 'package:flutter/services.dart';

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/enigo.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiEnigoInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => -604780238;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'enigo_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Button crateApiEnigoButtonBack();

  Button crateApiEnigoButtonForward();

  Button crateApiEnigoButtonLeft();

  Button crateApiEnigoButtonMiddle();

  Button crateApiEnigoButtonNew({required String value});

  Button crateApiEnigoButtonRight();

  Button crateApiEnigoButtonScrollDown();

  Button crateApiEnigoButtonScrollLeft();

  Button crateApiEnigoButtonScrollRight();

  Button crateApiEnigoButtonScrollUp();

  String crateApiEnigoButtonToString({required Button that});

  void crateApiEnigoEnigoButton(
      {required Enigo that,
      required Button button,
      required Direction direction});

  void crateApiEnigoEnigoKey(
      {required Enigo that,
      required PhysicalKeyboardKey key,
      required Direction direction});

  (int, int) crateApiEnigoEnigoLocation({required Enigo that});

  (int, int) crateApiEnigoEnigoMainDisplay({required Enigo that});

  void crateApiEnigoEnigoMoveMouse(
      {required Enigo that,
      required int x,
      required int y,
      required Coordinate coordinate});

  Enigo crateApiEnigoEnigoNew({required Settings settings});

  Enigo crateApiEnigoEnigoPreset();

  void crateApiEnigoEnigoRaw(
      {required Enigo that,
      required int keycode,
      required Direction direction});

  void crateApiEnigoEnigoScroll(
      {required Enigo that, required int length, required Axis axis});

  void crateApiEnigoEnigoText({required Enigo that, required String text});

  Future<void> crateApiEnigoInitApp();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Enigo;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Enigo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_EnigoPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Button;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Button;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ButtonPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Button crateApiEnigoButtonBack() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonBackConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonBackConstMeta => const TaskConstMeta(
        debugName: "Button_back",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonForward() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonForwardConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonForwardConstMeta => const TaskConstMeta(
        debugName: "Button_forward",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonLeft() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonLeftConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonLeftConstMeta => const TaskConstMeta(
        debugName: "Button_left",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonMiddle() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonMiddleConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonMiddleConstMeta => const TaskConstMeta(
        debugName: "Button_middle",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonNew({required String value}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonNewConstMeta,
      argValues: [value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonNewConstMeta => const TaskConstMeta(
        debugName: "Button_new",
        argNames: ["value"],
      );

  @override
  Button crateApiEnigoButtonRight() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonRightConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonRightConstMeta => const TaskConstMeta(
        debugName: "Button_right",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonScrollDown() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonScrollDownConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonScrollDownConstMeta =>
      const TaskConstMeta(
        debugName: "Button_scroll_down",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonScrollLeft() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonScrollLeftConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonScrollLeftConstMeta =>
      const TaskConstMeta(
        debugName: "Button_scroll_left",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonScrollRight() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonScrollRightConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonScrollRightConstMeta =>
      const TaskConstMeta(
        debugName: "Button_scroll_right",
        argNames: [],
      );

  @override
  Button crateApiEnigoButtonScrollUp() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonScrollUpConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonScrollUpConstMeta =>
      const TaskConstMeta(
        debugName: "Button_scroll_up",
        argNames: [],
      );

  @override
  String crateApiEnigoButtonToString({required Button that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoButtonToStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoButtonToStringConstMeta =>
      const TaskConstMeta(
        debugName: "Button_to_string",
        argNames: ["that"],
      );

  @override
  void crateApiEnigoEnigoButton(
      {required Enigo that,
      required Button button,
      required Direction direction}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
            button, serializer);
        sse_encode_direction(direction, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoButtonConstMeta,
      argValues: [that, button, direction],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoButtonConstMeta => const TaskConstMeta(
        debugName: "Enigo_button",
        argNames: ["that", "button", "direction"],
      );

  @override
  void crateApiEnigoEnigoKey(
      {required Enigo that,
      required PhysicalKeyboardKey key,
      required Direction direction}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKey(
            key, serializer);
        sse_encode_direction(direction, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoKeyConstMeta,
      argValues: [that, key, direction],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoKeyConstMeta => const TaskConstMeta(
        debugName: "Enigo_key",
        argNames: ["that", "key", "direction"],
      );

  @override
  (int, int) crateApiEnigoEnigoLocation({required Enigo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoLocationConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoLocationConstMeta => const TaskConstMeta(
        debugName: "Enigo_location",
        argNames: ["that"],
      );

  @override
  (int, int) crateApiEnigoEnigoMainDisplay({required Enigo that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoMainDisplayConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoMainDisplayConstMeta =>
      const TaskConstMeta(
        debugName: "Enigo_main_display",
        argNames: ["that"],
      );

  @override
  void crateApiEnigoEnigoMoveMouse(
      {required Enigo that,
      required int x,
      required int y,
      required Coordinate coordinate}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
        sse_encode_coordinate(coordinate, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoMoveMouseConstMeta,
      argValues: [that, x, y, coordinate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoMoveMouseConstMeta =>
      const TaskConstMeta(
        debugName: "Enigo_move_mouse",
        argNames: ["that", "x", "y", "coordinate"],
      );

  @override
  Enigo crateApiEnigoEnigoNew({required Settings settings}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_settings(settings, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoNewConstMeta,
      argValues: [settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoNewConstMeta => const TaskConstMeta(
        debugName: "Enigo_new",
        argNames: ["settings"],
      );

  @override
  Enigo crateApiEnigoEnigoPreset() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoPresetConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoPresetConstMeta => const TaskConstMeta(
        debugName: "Enigo_preset",
        argNames: [],
      );

  @override
  void crateApiEnigoEnigoRaw(
      {required Enigo that,
      required int keycode,
      required Direction direction}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        sse_encode_u_16(keycode, serializer);
        sse_encode_direction(direction, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoRawConstMeta,
      argValues: [that, keycode, direction],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoRawConstMeta => const TaskConstMeta(
        debugName: "Enigo_raw",
        argNames: ["that", "keycode", "direction"],
      );

  @override
  void crateApiEnigoEnigoScroll(
      {required Enigo that, required int length, required Axis axis}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        sse_encode_i_32(length, serializer);
        sse_encode_axis(axis, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoScrollConstMeta,
      argValues: [that, length, axis],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoScrollConstMeta => const TaskConstMeta(
        debugName: "Enigo_scroll",
        argNames: ["that", "length", "axis"],
      );

  @override
  void crateApiEnigoEnigoText({required Enigo that, required String text}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
            that, serializer);
        sse_encode_String(text, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoEnigoTextConstMeta,
      argValues: [that, text],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoEnigoTextConstMeta => const TaskConstMeta(
        debugName: "Enigo_text",
        argNames: ["that", "text"],
      );

  @override
  Future<void> crateApiEnigoInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiEnigoInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiEnigoInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Enigo =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Enigo =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Button => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Button => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button;

  @protected
  Enigo
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnigoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Button
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ButtonImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Enigo
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnigoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Button
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ButtonImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Enigo
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnigoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PhysicalKeyboardKey
      dco_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKey(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError(
        'Not implemented in this codec, please use the other one');
  }

  @protected
  Enigo
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnigoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Button
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ButtonImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Axis dco_decode_axis(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Axis.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  Settings dco_decode_box_autoadd_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_settings(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  Coordinate dco_decode_coordinate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Coordinate.values[raw as int];
  }

  @protected
  Direction dco_decode_direction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Direction.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  (int, int) dco_decode_record_i_32_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_32(arr[0]),
      dco_decode_i_32(arr[1]),
    );
  }

  @protected
  Settings dco_decode_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Settings(
      linuxDelay: dco_decode_u_32(arr[0]),
      x11Display: dco_decode_opt_String(arr[1]),
      waylandDisplay: dco_decode_opt_String(arr[2]),
      windowsDwExtraInfo: dco_decode_opt_box_autoadd_usize(arr[3]),
      eventSourceUserData: dco_decode_opt_box_autoadd_i_64(arr[4]),
      releaseKeysWhenDropped: dco_decode_bool(arr[5]),
      openPromptToGetPermissions: dco_decode_bool(arr[6]),
      independentOfKeyboardState: dco_decode_bool(arr[7]),
      windowsSubjectToMouseSpeedAndAccelerationLevel: dco_decode_bool(arr[8]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Enigo
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnigoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Button
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ButtonImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Enigo
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnigoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Button
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ButtonImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Enigo
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnigoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PhysicalKeyboardKey
      sse_decode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKey(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_u_32(deserializer);
    return PhysicalKeyboardKey(inner);
  }

  @protected
  Enigo
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EnigoImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Button
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ButtonImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Axis sse_decode_axis(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Axis.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  Settings sse_decode_box_autoadd_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_settings(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  Coordinate sse_decode_coordinate(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Coordinate.values[inner];
  }

  @protected
  Direction sse_decode_direction(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Direction.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (int, int) sse_decode_record_i_32_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Settings sse_decode_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_linuxDelay = sse_decode_u_32(deserializer);
    var var_x11Display = sse_decode_opt_String(deserializer);
    var var_waylandDisplay = sse_decode_opt_String(deserializer);
    var var_windowsDwExtraInfo = sse_decode_opt_box_autoadd_usize(deserializer);
    var var_eventSourceUserData = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_releaseKeysWhenDropped = sse_decode_bool(deserializer);
    var var_openPromptToGetPermissions = sse_decode_bool(deserializer);
    var var_independentOfKeyboardState = sse_decode_bool(deserializer);
    var var_windowsSubjectToMouseSpeedAndAccelerationLevel =
        sse_decode_bool(deserializer);
    return Settings(
        linuxDelay: var_linuxDelay,
        x11Display: var_x11Display,
        waylandDisplay: var_waylandDisplay,
        windowsDwExtraInfo: var_windowsDwExtraInfo,
        eventSourceUserData: var_eventSourceUserData,
        releaseKeysWhenDropped: var_releaseKeysWhenDropped,
        openPromptToGetPermissions: var_openPromptToGetPermissions,
        independentOfKeyboardState: var_independentOfKeyboardState,
        windowsSubjectToMouseSpeedAndAccelerationLevel:
            var_windowsSubjectToMouseSpeedAndAccelerationLevel);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          Enigo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnigoImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          Button self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ButtonImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          Enigo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnigoImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          Button self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ButtonImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          Enigo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnigoImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_CustomSerializer_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKey(
          PhysicalKeyboardKey self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.usbHidUsage, serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEnigo(
          Enigo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as EnigoImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInner_Button(
          Button self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ButtonImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_axis(Axis self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_settings(
      Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_coordinate(Coordinate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_direction(Direction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_record_i_32_i_32((int, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_settings(Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.linuxDelay, serializer);
    sse_encode_opt_String(self.x11Display, serializer);
    sse_encode_opt_String(self.waylandDisplay, serializer);
    sse_encode_opt_box_autoadd_usize(self.windowsDwExtraInfo, serializer);
    sse_encode_opt_box_autoadd_i_64(self.eventSourceUserData, serializer);
    sse_encode_bool(self.releaseKeysWhenDropped, serializer);
    sse_encode_bool(self.openPromptToGetPermissions, serializer);
    sse_encode_bool(self.independentOfKeyboardState, serializer);
    sse_encode_bool(
        self.windowsSubjectToMouseSpeedAndAccelerationLevel, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ButtonImpl extends RustOpaque implements Button {
  // Not to be used by end users
  ButtonImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ButtonImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Button,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Button,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ButtonPtr,
  );

  String toString() => RustLib.instance.api.crateApiEnigoButtonToString(
        that: this,
      );
}

@sealed
class EnigoImpl extends RustOpaque implements Enigo {
  // Not to be used by end users
  EnigoImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EnigoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Enigo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Enigo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EnigoPtr,
  );

  void button({required Button button, required Direction direction}) =>
      RustLib.instance.api.crateApiEnigoEnigoButton(
          that: this, button: button, direction: direction);

  void key({required PhysicalKeyboardKey key, required Direction direction}) =>
      RustLib.instance.api
          .crateApiEnigoEnigoKey(that: this, key: key, direction: direction);

  (int, int) location() => RustLib.instance.api.crateApiEnigoEnigoLocation(
        that: this,
      );

  (int, int) mainDisplay() =>
      RustLib.instance.api.crateApiEnigoEnigoMainDisplay(
        that: this,
      );

  void moveMouse(
          {required int x, required int y, required Coordinate coordinate}) =>
      RustLib.instance.api.crateApiEnigoEnigoMoveMouse(
          that: this, x: x, y: y, coordinate: coordinate);

  void raw({required int keycode, required Direction direction}) =>
      RustLib.instance.api.crateApiEnigoEnigoRaw(
          that: this, keycode: keycode, direction: direction);

  void scroll({required int length, required Axis axis}) => RustLib.instance.api
      .crateApiEnigoEnigoScroll(that: this, length: length, axis: axis);

  void text({required String text}) =>
      RustLib.instance.api.crateApiEnigoEnigoText(that: this, text: text);
}
